controller:
  # 'name' is a name of an existing secret in same namespace as jenkins,
  # 'keyName' is the name of one of the keys inside current secret.
  # the 'name' and 'keyName' are concatenated with a '-' in between, so for example:
  # an existing secret "secret-credentials" and a key inside it named "github-password" should be used in Jcasc as ${secret-credentials-github-password}
  # 'name' and 'keyName' must be lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-',
  # and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc')
  additionalExistingSecrets:
    #   # you should setup the secret `google-oauth2` with key:
    #   #  `client-id` and `client-secret` before deploy jenkins
    #   #  in the same namespace.
    #   - name: google-oauth2
    #     keyName: client-id
    #   - name: google-oauth2
    #     keyName: client-secret
    # for git clone for private repo.
    - { name: github, keyName: git-private-key }
    - { name: github, keyName: git-username }
    - { name: github, keyName: bot-token }
    # for codecov.io uploading
    - { name: codecov-token, keyName: tidb }
    # for ci cache
    - { name: cache-s3, keyName: region }
    - { name: cache-s3, keyName: bucket }
    - { name: cache-s3, keyName: endpoint }
    - { name: cache-s3, keyName: access-key }
    - { name: cache-s3, keyName: access-secret }
    # for build failure knowledge base, secret created by mongodb helm release, no need create manually.
    - { name: mongodb, keyName: mongodb-root-password }

  additionalSecrets: []
  #  - name: nameOfSecret
  #    value: secretText

  JCasC:
    defaultConfig: true
    # Ignored if authorizationStrategy is defined in controller.JCasC.configScripts
    authorizationStrategy: |-
      loggedInUsersCanDoAnything:
        allowAnonymousRead: true # allow users to read builds logs without logging in.
    # authorizationStrategy: |-
    #   globalMatrix:
    #     permissions:
    #     - "Job/Read:anonymous"
    #     - "Lockable Resources/View:anonymous"
    #     - "Metrics/View:anonymous"
    #     - "Overall/Read:anonymous"
    #     - "Overall/Read:authenticated"
    #     - "View/Read:anonymous"
    #     # add more...

    # for security.
    security:
      gitHostKeyVerificationConfiguration:
        sshHostKeyVerificationStrategy: "noHostKeyVerificationStrategy"
      globalJobDslSecurityConfiguration:
        useScriptSecurity: false

    securityRealm: |-
      local:
        allowsSignup: false
        enableCaptcha: false
        users:
        - id: "${chart-admin-username}"
          name: "Jenkins Admin"
          password: "${chart-admin-password}"

    # securityRealm: |-
    #   googleOAuth2:
    #     # will read from key `client-id` from secret `google-oauth2`
    #     clientId: "${google-oauth2-client-id}"
    #     # will read from key `client-secret` from secret `google-oauth2`
    #     clientSecret: "${google-oauth2-client-secret}"

    # REF Doc: https://github.com/PingCAP-QE/ee-ops/blob/main/charts/jenkins/README.md
    #
    # Notable: if you want delete some key, first please delete the conetnt but keep the key.
    #   after deployed, then create other commit and push to delete the key.
    configScripts:
      #  welcome-message: |
      #    jenkins:
      #      systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
      # Ignored if securityRealm is defined in controller.JCasC.configScripts and
      # ignored if controller.enableXmlConfig=true as controller.securityRealm takes precedence
      # securityRealm: |
      #   jenkins:
      #     securityRealm:
      #       googleOAuth2:
      #         # will read from key `client-id` from secret `google-oauth2`
      #         clientId: "${google-oauth2-client-id}"
      #         # will read from key `client-secret` from secret `google-oauth2`
      #         clientSecret: "${google-oauth2-client-secret}"

      # for credentials, REF Doc: https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos/credentials
      credentials: |
        credentials:
          system:
            domainCredentials:
              - domain:
                  name: github.com
                  description: github ssh and open api
                credentials:
                  - basicSSHUserPrivateKey:
                      id: github-sre-bot-ssh # TODO: change the id.
                      privateKeySource:
                        directEntry:
                          privateKey: ${github-git-private-key}
                      scope: GLOBAL
                      username: ${github-git-username}
                      usernameSecret: true
                  - string:
                      id: github-bot-token
                      description: github private token to call api.
                      scope: GLOBAL
                      secret: ${github-bot-token}
              - domain:
                  name: codecov.io
                credentials:
                  - string:
                      id: codecov-token-tidb
                      description: codecov token for tidb
                      scope: GLOBAL
                      secret: ${codecov-token-tidb}
      # for jobs.
      jobs-dsl: |
        jobs:
          - script: |
              job('seed') {
                description('''
                    Jenkins jobs As Code
                    No need to configure job on Jenkins Web UI anymore.
                ''')
                scm {
                  git {
                    remote {
                      github('PingCAP-QE/ci', 'https')
                    }
                    branch('main')
                  }
                }
                triggers {
                  githubPush()
                }
                steps {
                  jobDsl {
                    targets('jobs/**/*.groovy')
                    failOnMissingPlugin(false)
                    ignoreMissingFiles(true)
                    ignoreExisting(false)
                    removedJobAction('DELETE')
                    removedConfigFilesAction('DELETE')
                    removedViewAction('DELETE')
                    lookupStrategy('SEED_JOB')
                    sandbox(false)
                  }
                }
              }

              queue('seed')
      github-pull-request-builder-trigger: |
        unclassified:
          ghprbTrigger:
            autoCloseFailedPullRequests: false
            cron: "H/5 * * * *"
            extensions:
              - ghprbSimpleStatus:
                  addTestResults: false
                  completedStatus:
                    - message: "Build passed"
                      result: SUCCESS
                    - message: "Build failed"
                      result: FAILURE
                    - message: "Build error"
                      result: ERROR
                  showMatrixStatus: false
                  startedStatus: "Build started"
                  triggeredStatus: "Build triggered"
            githubAuth:
              - credentialsId: github-bot-token
                description: "ti-chi-bot"
                secret: ""
                serverAPIUrl: "https://api.github.com" # replace with github proxy.
            manageWebhooks: true
            okToTestPhrase: ".*ok\\W+to\\W+test.*"
            requestForTestingPhrase: "Can one of the admins verify this patch?"
            retestPhrase: ".*test\\W+this\\W+please.*"
            skipBuildPhrase: ".*\\[skip\\W+ci\\].*"
            useComments: false
            useDetailedComments: false
            whitelistPhrase: ".*add\\W+to\\W+whitelist.*"
      github-plugin-config: |
        unclassified:
          gitHubConfiguration:
            apiRateLimitChecker: ThrottleOnOver
          gitHubPluginConfig:
            hookUrl: "https://do.pingcap.net/jenkins/github-webhook/"
      pipeline-cache: |
        unclassified:
          pipeline-cache:
            region: ${cache-s3-region}
            bucket: ${cache-s3-bucket}
            endpoint: ${cache-s3-endpoint}
            username: ${cache-s3-access-key}
            password: ${cache-s3-access-secret}
            threshold: 100000 # limit to 100GiB
      # for global env variables
      env-vars: |
        jenkins:
          globalNodeProperties:
            - envVars:
                env:
                  - key: "GOPROXY"
                    value: "http://goproxy.pingcap.net,direct"
      build-failure-analyzer: |
        unclassified:
          buildFailureAnalyzer:
            doNotAnalyzeAbortedJob: true
            gerritTriggerEnabled: false
            globalEnabled: true
            graphsEnabled: false
            knowledgeBase:
              mongoDB:
                dbName: jenkins-failure-pattern
                enableStatistics: true
                host: 172.16.5.83
                password: "${mongodb-mongodb-root-password}"
                port: 32017
                successfulLogging: true
                userName: root
            maxLogSize: 0
            metricSquashingEnabled: true
            noCausesEnabled: true
            noCausesMessage: >-
              No problems were identified. If you know why this problem occurred,
              please add a suitable Cause in https://pingcap.feishu.cn/wiki/wikcno79XYpVsvJeiRsMm38b5eh, add a config it.
            nrOfScanThreads: 3
            testResultParsingEnabled: false
            testResultCategories: "UT"
            fallbackCategoriesAsString: unknown
