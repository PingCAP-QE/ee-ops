apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: buildbarn
  namespace: flux-system
spec:
  releaseName: buildbarn
  targetNamespace: apps
  chart:
    spec:
      chart: buildbarn
      version: 0.0.6
      sourceRef:
        kind: HelmRepository
        name: ee-ops
        namespace: flux-system
  interval: 1h
  install:
    remediation:
      retries: 3
  upgrade:
    force: true
    cleanupOnFail: true
  test:
    enable: true
    ignoreFailures: false
  values:
    browser:
      ingress:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: nginx
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        hosts:
          - host: internal.do.pingcap.net
            paths:
              - path: /bb(/|$)(.*)
                pathType: Prefix
    frontend:
      ingress:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/ssl-redirect: "true"
          nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
          kubernetes.io/ingress.class: nginx
          kubernetes.io/tls-acme: "true"
          nginx.ingress.kubernetes.io/use-regex: "true"
          nginx.ingress.kubernetes.io/rewrite-target: /$2
        hosts:
          - host: internal.do.pingcap.net
            paths:
              - path: /bf(/|$)(.*)
                pathType: Prefix
        tls:
          # generatioin:
          #   openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=nginxsvc/O=nginxsvc"
          #   kubectl create secret tls internal-do-tls --key tls.key --cert tls.crt
          - secretName: internal-do-tls
            hosts:
              - internal.do.pingcap.net
    storage:
      volumeClaims:
        # storage.volumeClaims.cas -- cas volume claim spec
        cas:
          storageClassName: ceph-block
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 500Gi
        ac:
          storageClassName: ceph-block
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi # ac:cas >= 1:1000
      conf: |-
        local common = import 'common.libsonnet';

        {
          global: common.global,
          grpcServers: [{
            listenAddresses: [':8981'],
            authenticationPolicy: common.allowAllauthorizerConfiguration,
          }],
          maximumMessageSizeBytes: common.maximumMessageSizeBytes,
          contentAddressableStorage: {
            backend: {
              'local': {
                keyLocationMapOnBlockDevice: {
                  file: {
                    path: '/storage-cas/key_location_map',
                    sizeBytes: 480 * 1024 * 1024,
                  },
                },
                keyLocationMapMaximumGetAttempts: 8,
                keyLocationMapMaximumPutAttempts: 32,
                oldBlocks: 8,
                currentBlocks: 24,
                newBlocks: 3,
                blocksOnBlockDevice: {
                  source: {
                    file: {
                      path: '/storage-cas/blocks',
                      sizeBytes: 480 * 1024 * 1024 * 1024,
                    },
                  },
                  spareBlocks: 3,
                },
                persistent: {
                  stateDirectoryPath: '/storage-cas/persistent_state',
                  minimumEpochInterval: '300s',
                },
              },
            },
            getAuthorizer: { allow: {} },
            putAuthorizer: { allow: {} },
            findMissingAuthorizer: { allow: {} },
          },
          actionCache: {
            backend: {
              'local': {
                keyLocationMapOnBlockDevice: {
                  file: {
                    path: '/storage-ac/key_location_map',
                    sizeBytes: 30 * 1024 * 1024,
                  },
                },
                keyLocationMapMaximumGetAttempts: 8,
                keyLocationMapMaximumPutAttempts: 32,
                oldBlocks: 8,
                currentBlocks: 24,
                newBlocks: 1,
                blocksOnBlockDevice: {
                  source: {
                    file: {
                      path: '/storage-ac/blocks',
                      sizeBytes: 600 * 1024 * 1024,
                    },
                  },
                  spareBlocks: 3,
                },
                persistent: {
                  stateDirectoryPath: '/storage-ac/persistent_state',
                  minimumEpochInterval: '300s',
                },
              },
            },
            getAuthorizer: { allow: {} },
            putAuthorizer: { allow: {} },
          },
        }

    commonConf: |-
      {
        global: {
          diagnosticsHttpServer: {
            listenAddress: ':8080',
            enablePrometheus: true,
            enablePprof: true,
            enableActiveSpans: true,
          },
          setUmask: { umask: 0 },
        },
        allowAllauthorizerConfiguration: {
          allow: {},
        },
        blobstore: {
          contentAddressableStorage: {
            readCaching: {
              fast: {
                sharding: {
                  hashInitialization: 11946695773637837490,
                  shards: [
                    {
                      backend: { grpc: { address: 'buildbarn-storage-0.buildbarn-storage:8981' } },
                      weight: 1,
                    },
                    {
                      backend: { grpc: { address: 'buildbarn-storage-1.buildbarn-storage:8981' } },
                      weight: 1,
                    },
                  ],
                },
              },
              slow: { grpc: { address: 'brc-bazel-remote.apps.svc:9092' } },
              replicator: {
                queued: {
                  base: { 'local': {} },
                  existenceCache: {
                    cacheSize: 1024 * 1024 * 1024,
                    cacheDuration: '600s',
                    cacheReplacementPolicy: 'LEAST_RECENTLY_USED',
                  },
                },
              },
            },
          },
          actionCache: {
            completenessChecking: {
              backend: {
                readCaching: {
                  fast: {
                    sharding: {
                      hashInitialization: 11946695773637837490,
                      shards: [
                        {
                          backend: { grpc: { address: 'buildbarn-storage-0.buildbarn-storage:8981' } },
                          weight: 1,
                        },
                        {
                          backend: { grpc: { address: 'buildbarn-storage-1.buildbarn-storage:8981' } },
                          weight: 1,
                        },
                      ],
                    },
                  },
                  slow: { grpc: { address: 'brc-bazel-remote.apps.svc:9092' } },
                  replicator: {
                    queued: {
                      base: { 'local': {} },
                      existenceCache: {
                        cacheSize: 1024 * 1024,
                        cacheDuration: '600s',
                        cacheReplacementPolicy: 'LEAST_RECENTLY_USED',
                      },
                    },
                  },
                },
              },
              maximumTotalTreeSizeBytes: 64 * 1024 * 1024,
            },
          },
        },
        // Remember to set your browserUrl to the ingress of the browser deployment
        browserUrl: 'http://buildbarn-browser:80',
        maximumMessageSizeBytes: 16 * 1024 * 1024,
        httpListenAddress: ':80',
      }


