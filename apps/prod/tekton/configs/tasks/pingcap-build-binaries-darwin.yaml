apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pingcap-build-binaries-darwin
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Build binaries for the component.
  workspaces:
    - name: source
    - name: dockerconfig
      description: Includes a docker `config.json`
      mountPath: /root/.docker
      optional: true
    - name: ssh-directory
      description: ssh credential for remote building on mac.
  results:
    - description: Just built and pushed images, it will be a yaml content.
      name: pushed
      type: string
  params:
    - name: component
    - name: os
      default: linux
    - name: arch
      default: amd64
    - name: version
      type: string
      description: the version to releasing.
    - name: profile
      type: string
      default: release
      description: >
        supports: 'release' or 'debug'.
    - name: git-ref
    - name: git-sha
    - name: builder-image
      default: ghcr.io/pingcap-qe/cd/utils/release:v20231216-37-g8e0ca7e
    - name: release-dir
      default: build
    - name: push
      type: string
      default: 'false'
    - name: mac-builder-resource
      type: string
  steps:
    - name: generate-build-script
      image: ghcr.io/pingcap-qe/cd/utils/release:v20231216-37-g8e0ca7e
      script: |
        git clone --depth=1 --branch=main https://github.com/PingCAP-QE/artifacts.git /workspace/artifacts

        git_ref="$(params.git-ref)"
        git_sha="$(params.git-sha)"
        if [ "$git_sha" == "$git_ref" ]; then
          git_sha=""
        fi

        out_script="/workspace/build-package-artifacts.sh"
        /workspace/artifacts/packages/scripts/gen-package-artifacts-with-config.sh \
          $(params.component) \
          $(params.os) \
          $(params.arch) \
          $(params.version) \
          $(params.profile) \
          $git_ref \
          "$git_sha" \
          /workspace/artifacts/packages/packages.yaml.tmpl \
          "$out_script"

        if [ -f "$out_script" ]; then
          cat "$out_script"
        else
          echo "🤷 no output script generated!"
        fi
    - name: prepare-remote-builder
      image: ghcr.io/pingcap-qe/cd/utils/release:v20231216-37-g8e0ca7e
      env:
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: REMOTE_BUILDER_INFO_DIR
          value: /workspace/remote-builder
      script: |
        #!/usr/bin/env bash
        set -exo pipefail

        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" != "true" ] ; then
          exit 0
        fi

        if [ "$(params.os)" != "darwin" ]; then
          exit 0
        fi


        if [ ! -f "${WORKSPACE_SSH_DIRECTORY_PATH}/hosts.yaml" ]; then
          echo "No ~/.ssh/hosts.yaml found, we need it to get the address and other insecret configurations."
          exit 1
        fi

        which yq || (echo "No yq tool found, I need it!"; exit 1)
        mkdir -p "$REMOTE_BUILDER_INFO_DIR"

        ######### checks and sets #########
        yq '.["$(params.mac-builder-resource)"].host'   "${WORKSPACE_SSH_DIRECTORY_PATH}/hosts.yaml" > "$REMOTE_BUILDER_INFO_DIR/ssh_host"
        yq '.["$(params.mac-builder-resource)"].config.workspace_dir'   "${WORKSPACE_SSH_DIRECTORY_PATH}/hosts.yaml" > "$REMOTE_BUILDER_INFO_DIR/ssh_workspace"
        # TODO: do more pre-check or pre-set.
    - name: pre-build
      image: "$(params.builder-image)"
      script: |
        # 1. optional get go builder in PATH env var, got the go version(x.y) from the current container with `go version`.
        :> /workspace/remote.env

        if go version; then
          go_bin_path="/usr/local/$(go version | cut -d ' ' -f 3 | cut -d '.' -f -2)/bin"
          echo "export PATH=${go_bin_path}:\$PATH" >> /workspace/remote.env
        fi
    - name: build
      image: ghcr.io/pingcap-qe/cd/utils/remote:v20231216-51-g3bb25fd
      env:
        - name: WORKSPACE_SSH_DIRECTORY_BOUND
          value: $(workspaces.ssh-directory.bound)
        - name: WORKSPACE_SSH_DIRECTORY_PATH
          value: $(workspaces.ssh-directory.path)
        - name: MAC_MACHINE_RES_ID
          value: "(params.mac-builder-resource)"
        - name: REMOTE_BUILDER_INFO_DIR
          value: /workspace/remote-builder
      workingDir: $(workspaces.source.path)
      # TODO: get the user and host by better way. 
      script: |
        #!/usr/bin/env bash
        set -exo pipefail

        script="/workspace/build-package-artifacts.sh"
        if [ ! -f "$script" ]; then
          echo "No build script, skip build."
          exit 0
        fi
        
        ##### Build mac targets in tekton task (k8s pod) ####
        # 1. Set ssh credentials
        if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" != "true" ] ; then
          echo "❌: No ssh credential volume mounted, it's required!"
          exit 1
        fi
        cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" ~/.ssh
        chmod 700 ~/.ssh
        chmod -R 400 ~/.ssh/*
        username=$(cat ~/.ssh/username)
        host=$(cat "$REMOTE_BUILDER_INFO_DIR/ssh_host")
        ssh-keyscan -H $host >> ~/.ssh/known_hosts
        workspace_base_dir=$(cat "$REMOTE_BUILDER_INFO_DIR/ssh_workspace")

        # 2. login to the remote builder with ssh and then execute the shell.
        # TODO: we need some pre-check scripts: such as get git version...

        # 2.1 create a randon workspace dir in the remote host:
        remote_workspace_dir="${workspace_base_dir}/$(context.taskRun.name)"
        ssh ${username}@${host} "mkdir -p '$remote_workspace_dir'"
        
        # 2.2 copy the build shell to the remote host by ssh.
        scp "$script" /workspace/remote.env ${username}@${host}:"$remote_workspace_dir/"

        # 2.3 copy source codes from workspace `source` to the remote host by ssh.
        rsync --ignore-errors --progress -azh -e ssh $(workspaces.source.path) ${username}@${host}:"$remote_workspace_dir"
        remote_workspace_source_path="$remote_workspace_dir/$(basename $(workspaces.source.path))"

        # 2.4 run the shell on the mac host by ssh.
        ssh $username@$host -t  "bash -lc '
          cd "$remote_workspace_source_path";
          source ${remote_workspace_dir}/remote.env;
          ${remote_workspace_dir}/build-package-artifacts.sh -b -a -w $(params.release-dir)
        '"

        # 2.5 copy the artifacts from the mac hosts to the workspace `source`, we need deliver them internal firstly.
        scp -r ${username}@${host}:"$remote_workspace_source_path/$(params.release-dir)" ./

        # 3. clean the workspace dir(it will be a random name) on the ssh mac host.
        ssh ${username}@${host} "rm -rf '$remote_workspace_dir'"
    - name: publish
      image: ghcr.io/pingcap-qe/cd/utils/release:v20231216-37-g8e0ca7e
      workingDir: $(workspaces.source.path)
      script: |
        script="/workspace/build-package-artifacts.sh"
        if [ ! -f "$script" ]; then
          echo "No build script, skip it."
          printf '"{}"' > $(results.pushed.path)
          exit 0
        fi

        oras version
        "$script" -p -w "$(params.release-dir)" -o $(results.pushed.path)
