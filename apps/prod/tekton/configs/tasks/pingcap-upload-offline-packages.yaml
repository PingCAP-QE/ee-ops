apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pingcap-upload-offline-pacakges
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: CLI
    tekton.dev/tags: cli
    tekton.dev/displayName: "aws cli"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  description: >-
    This task performs upload for pingcap's offline packages.
  params:
    - name: version
      type: string
    - name: edition
      type: string
      default: community
    - name: os
      default: linux
    - name: arch
      type: string
      default: amd64
    - name: env-secret-name
      type: string
    - name: oci-repo
      default: "hub.pingcap.net/pingcap/offline-package"
    - name: dry-run
      default: 'false'
  workspaces:
    - name: aws-secrets
      optional: true
  steps:
    - name: upload-offline-tarballs
      workingDir: /workspace
      image: python:3.12.5
      envFrom:
        - secretRef:
            name: $(params.env-secret-name)
      script: |
        #!/usr/bin/env bash
        set -e

        repo="$(params.oci-repo)"
        dl_svr_url="https://internal-do.pingcap.net/dl"
        FILE_SERVER_URL="http://fileserver.pingcap.net"

        # prepare script for uploading to QiNiu.
        pip3 install qiniu
        wget -O upload_qiniu.py https://github.com/PingCAP-QE/ci/raw/main/scripts/artifacts/upload_qiniu.py
        apt-get update -y && apt-get install jq -y

        tag="$(params.version)-$(params.edition)_$(params.os)_$(params.arch)"
        echo "ðŸš€ uploading for ${tag} ..."

        curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}"
        for f in $(curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}" | jq -r '.[]'); do
          # download from oci artifact.
          echo "ðŸš€ Downloading $f from ${repo}:${tag} ..."
          wget -q -O "$f" "${dl_svr_url}/oci-file/${repo}?tag=${tag}&file=$f"
          echo "âœ… Downloaded $f from ${repo}:${tag} ."

          # upload it.
          target_f=$(echo "$f" | sed 's/-pre//')
          echo "ðŸš€ Uploading $f ..."
          if [ "$(params.dry-run)" == "true" ]; then
            echo "ðŸ§ªðŸ©º DRY run mode enabled."
            python upload_qiniu.py $f fake-release/$target_f
            curl --fail -F fake-release/$f=@${target_f} ${FILE_SERVER_URL}/upload | grep -E 'success'
          else
            python upload_qiniu.py $f $target_f
            curl --fail -F release/$target_f=@${f} ${FILE_SERVER_URL}/upload | grep -E 'success'
          fi

          echo "âœ… Uploaded $f ."
        done
        echo "âœ… Uploaded for ${tag} ."

    - name: upload-dm-tarballs-to-s3
      image: docker.io/amazon/aws-cli:2.17.30
      workingDir: /workspace
      script: |
        #!/usr/bin/env bash
        set -e

        if [ "$(params.edition)" != "dm" ]; then
          exit 0
        fi
        if [ ! -f "$(workspaces.aws-secrets.path)/credentials" ]; then
          echo "Error: aws-secrets workspace is not bound."
          exit 1
        fi

        repo="$(params.oci-repo)"
        dl_svr_url="https://internal-do.pingcap.net/dl"
        tag="$(params.version)-$(params.edition)_$(params.os)_$(params.arch)"

        yum install jq -y

        echo "ðŸš€ uploading for ${tag} ..."
        cp -r $(workspaces.aws-secrets.path) ~/.aws

        # no need to download it again, it is downloaded in previous step.
        curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}"
        for f in $(curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}" | jq -r '.[]'); do
          # upload it.
          target_f=$(echo "$f" | sed 's/-pre//')
          echo "ðŸš€ Uploading $f ..."
          if [ "$(params.dry-run)" == "true" ]; then
            echo "ðŸ§ªðŸ©º DRY run mode enabled."
            aws s3 cp $f s3://download.pingcap.org/fake-release/$target_f --acl public-read
          else
            aws s3 cp $f s3://download.pingcap.org/$target_f --acl public-read
          fi
          echo "âœ… Uploaded $f ."
        done
        echo "âœ… Uploaded for ${tag} ."
