apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: create-pr-to-update-gomod-fix-ladp
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.29.0"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  description: >-
    Create pull request to fix `go.mod` file to github repository branch.
    Also, update ldap crt/key if the branch is a hotfix branch for specific release series(release-7.5-*, release-8.1-*, release-8.5-*).
  params:
    - name: git-url
      description: repository clone url
      type: string
    - name: branch
      description: branch name
      type: string
    - name: golang-image
      description: the image to run go mod edit and go mod tidy
      default: ghcr.io/pingcap-qe/ci/base:v20231216-14-g77d0cd2-go1.19
  steps:
    - name: clone
      image: bitnami/git:2.43.0
      workingDir: /workspace
      script: |
        git clone $(params.git-url) --branch $(params.branch) --depth 1 /workspace/src
    - name: update-gomod
      image: "$(params.golang-image)"
      workingDir: /workspace/src
      env:
        - name: GOPROXY
          value: "http://goproxy.apps.svc,direct"
      script: |
        git config --global --add safe.directory `pwd`

        # replace appdash and update go.mod
        go mod edit -replace sourcegraph.com/sourcegraph/appdash=github.com/sourcegraph/appdash@v0.0.0-20190731080439-ebfcffb1b5c0
        go mod edit -replace sourcegraph.com/sourcegraph/appdash-data=github.com/sourcegraph/appdash-data@v0.0.0-20151005221446-73f23eafcf67
        go mod tidy

        if git diff --exit-code --name-status go.mod; then
          echo "ðŸ¤· No need to update the go.mod file, they are updated."
          exit 0
        else
          # update bazel file
          echo 'build --remote_cache=http://ats.apps.svc/brc/tidb --remote_timeout="30s"' > ~/.bazelrc
          make bazel_prepare || true
        fi
        
    - name: create-pr
      image: bitnami/git:2.43.0
      workingDir: /workspace/src
      script: |
        git config --global --add safe.directory `pwd`
        git config --global user.email "ti-community-prow-bot@tidb.io"
        git config --global user.name  "ti-chi-bot"

        if git diff --exit-code --name-status go.mod; then
          echo "ðŸ¤· No need to update the go.mod file, they are updated."
          exit 0
        else
          echo "ðŸš€ Let's update go.mod and go.sum files..."
        fi

        # install `gh` tool
        type -p curl >/dev/null || ( apt update &&  apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg |  dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" |  tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && apt update \
        && apt install gh -y

        # login and setup git
        gh auth login --with-token < $(workspaces.github.path)/token
        gh auth setup-git

        # commit and push the changes.
        head_branch="fix/$(params.branch)/go-module-appdash"
        git checkout -b "$head_branch"
        commit_msg="deps: replace 'sourcegraph.com/sourcegraph/appdash*' in go.mod"
        git commit -am "$commit_msg"
        git push origin "$head_branch"


        # Update ladp crt/key by cherry-pick specific commit from base release branch
        # Check if the branch is a hotfix branch for specific release series
        if [[ "$(params.branch)" == "release-7.5-"* || \
              "$(params.branch)" == "release-8.1-"* || \
              "$(params.branch)" == "release-8.5-"* ]]; then
          echo "Branch $(params.branch) is a hotfix branch which may need to update the ldap crt/key."
          
          base_release_branch=""
          if [[ "$(params.branch)" == "release-7.5-"* ]]; then
            base_release_branch="release-7.5"
          elif [[ "$(params.branch)" == "release-8.1-"* ]]; then
            base_release_branch="release-8.1"
          elif [[ "$(params.branch)" == "release-8.5-"* ]]; then
            base_release_branch="release-8.5"
          fi

          if [[ -n "$base_release_branch" ]]; then
            echo "Fetching base release branch: $base_release_branch..."
            git fetch origin $base_release_branch
            echo "Successfully fetched $base_release_branch."
          else
            echo "Could not determine base release branch for $(params.branch)"
          fi
          
          commit_to_cherry_pick=$(git log origin/$base_release_branch --grep="re-generate crt/key for ldap test" --format=%H -n 1)
          if [[ -n "$commit_to_cherry_pick" ]]; then
            echo "Cherry-picking commit $commit_to_cherry_pick from $base_release_branch"
            git cherry-pick $commit_to_cherry_pick
            git push origin "$head_branch"
          else
            echo "No relevant commit found in $base_release_branch to cherry-pick for ldap crt/key update."
          fi
        else
          echo "Branch $(params.branch) is not one of the specified hotfix release branches (release-7.5-*, release-8.1-*, release-8.5-*). Skipping fix ldap crt/key."
        fi

        # create pull request
        cat <<EOF > pr_body.txt
        ### Release note

        Please refer to [Release Notes Language Style Guide](https://pingcap.github.io/tidb-dev-guide/contribute-to-tidb/release-notes-style-guide.html) to write a quality release note.

        \`\`\`release-note
        None
        \`\`\`
        EOF
        gh pr create \
          --base $(params.branch) \
          --head "$head_branch" \
          --fill \
          --body-file pr_body.txt
  workspaces:
    - name: github
      description: Must includes a key `token`
