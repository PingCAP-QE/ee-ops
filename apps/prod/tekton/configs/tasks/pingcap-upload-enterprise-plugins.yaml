apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pingcap-upload-enterprise-plugins
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.39.0"
    tekton.dev/categories: CLI
    tekton.dev/tags: cli
    tekton.dev/displayName: "aws cli"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  description: >-
    This task performs upload for pingcap's offline packages.
  params:
    - name: version
      type: string
    - name: env-secret-name
      type: string
    - name: dry-run
      default: 'false'
    - name: oci-repo
      default: hub.pingcap.net/pingcap/tidb/package
  steps:
    - name: upload-offline-tarballs
      workingDir: /workspace
      image: python:3.12.7
      envFrom:
        - secretRef:
            name: $(params.env-secret-name)
      script: |
        #!/usr/bin/env bash
        set -e

        repo="$(params.oci-repo)"
        dl_svr_url="https://internal-do.pingcap.net/dl"
        FILE_SERVER_URL="http://fileserver.pingcap.net"

        # prepare script for uploading to QiNiu.
        pip3 install qiniu
        wget -O upload_qiniu.py https://github.com/PingCAP-QE/ci/raw/main/scripts/artifacts/upload_qiniu.py
        apt-get update -y && apt-get install jq -y

        for platform in linux_amd64 linux_arm64; do
          tag="$(params.version)-enterprise_${platform}"
          echo "ðŸš€ uploading for ${tag} ..."

          curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}"
          for f in $(curl "${dl_svr_url}/oci-files/${repo}?tag=${tag}" | jq -r '.[]' | grep "plugins-v"); do
            # download from oci artifact.
            echo "ðŸš€ Downloading $f from ${repo}:${tag} ..."
            wget -q -O "$f" "${dl_svr_url}/oci-file/${repo}?tag=${tag}&file=$f"
            echo "âœ… Downloaded $f from ${repo}:${tag} ."

            # upload it.
            target_f="enterprise-plugin-v${f#*-v}"
            target_f=$(echo "$target_f" | sed 's/-pre//')

            echo "ðŸš€ Uploading $f => $target_f ..."
            if [ "$(params.dry-run)" == "true" ]; then
              echo "ðŸ§ªðŸ©º DRY run mode enabled."
              python upload_qiniu.py $f fake-release/$target_f
              curl --fail -F fake-release/${target_f}=@${f} ${FILE_SERVER_URL}/upload | grep -E 'success'
            else
              python upload_qiniu.py $f $target_f
              curl --fail -F release/${target_f}=@${f} ${FILE_SERVER_URL}/upload | grep -E 'success'
            fi
            echo "âœ… Uploaded $f => $target_f."
          done
          echo "âœ… Uploaded for ${tag} ."
        done
