---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: github-set-status
  labels:
    app.kubernetes.io/version: "0.3"
  annotations:
    tekton.dev/categories: Git
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: github
    tekton.dev/displayName: "set github status"
    tekton.dev/platforms: "linux/amd64,linux/s390x,linux/ppc64le"
spec:
  description: >-
    This task will set the status of the CI job to the specified value along
    witha link to the specified target URL where developers can follow the
    progress of the CI job.

    The `github-set-status` task allows external services to mark GitHub commits
    with an `error`, `failure`, `pending`, or `success` state, which is then
    reflected in pull requests involving those commits. Statuses include as well a
    `description` and a `targetUrl`, to give the user informations about the CI
    statuses or a direct link to the full log.

  params:
    - name: repoFullname
      description: |
        The GitHub repository full name, e.g.: tektoncd/catalog
      type: string

    - name: githubTokenSecretName
      description: |
        The name of the kubernetes secret that contains the GitHub token, default: github
      type: string
      default: github

    - name: githubTokenSecretKey
      description: |
        The key within the kubernetes secret that contains the GitHub token, default: token
      type: string
      default: token

    - name: sha
      description: |
        Commit SHA to set the status for.
      type: string

    - name: targetUrl
      description: |
        The target URL to associate with this status. This URL will be linked
        from the GitHub UI to allow users to easily see the source of the
        status.
      type: string

    - name: description
      description: |
        A short description of the status.
      type: string

    - name: context
      description: |
        The GitHub context, A string label to differentiate this status from
        the status of other systems. ie: "continuous-integration/tekton"
      type: string

    - name: state
      description: |
        The state of the status. Can be one of the following:
        `error`, `failure`, `pending`, or `success`.
      type: string

    - name: githubHostUrl
      description: |
        The GitHub host, adjust this if you run a GitHub enterprise.
      default: "api.github.com"
      type: string

    - name: apiPathPrefix
      description: |
        The API path prefix, GitHub Enterprise has a prefix e.g. /api/v3
      default: ""
      type: string

    - name: authType
      description: |
        The type of authentication to use. You could use the less secure "Basic" for example
      type: string
      default: Bearer
    

  volumes:
    - name: githubtoken
      secret:
        secretName: $(params.githubTokenSecretName)

  steps:
    - name: set-status
      volumeMounts:
        - name: githubtoken
          mountPath: /etc/github-set-status

      image: python:3.10
      script: |
        #!/usr/bin/env python3

        """This script will set the CI status on GitHub PR"""

        import json
        import sys
        import http.client

        github_token = open("/etc/github-set-status/$(params.githubTokenSecretKey)", "r").read()

        status_url = "$(params.apiPathPrefix)" + "/repos/$(params.repoFullname)/" + \
            "statuses/$(params.sha)"

        data = {
            "state": "$(params.state)",
            "targetUrl": "$(params.targetUrl)",
            "description": "$(params.description)",
            "context": "$(params.context)"
        }
        print("Sending this data to GitHub: ")
        print(data)

        authHeader = "$(params.authType) " + github_token

        conn = http.client.HTTPSConnection("$(params.githubHostUrl)")
        conn.request(
            "POST",
            status_url,
            body=json.dumps(data),
            headers={
                "User-Agent": "TektonCD, the peaceful cat",
                "Authorization": authHeader,
                "Accept": "application/vnd.github.v3+json ",
            })
        resp = conn.getresponse()
        if not str(resp.status).startswith("2"):
            print("Error: %d" % (resp.status))
            print(resp.read())
            sys.exit(1)
        else:
            print("GitHub status '$(params.state)' has been set on "
                "$(params.repoFullname)#$(params.sha) ")
