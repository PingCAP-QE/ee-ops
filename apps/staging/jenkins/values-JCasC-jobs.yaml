controller:
  # 'name' is a name of an existing secret in same namespace as jenkins,
  # 'keyName' is the name of one of the keys inside current secret.
  # the 'name' and 'keyName' are concatenated with a '-' in between, so for example:
  # an existing secret "secret-credentials" and a key inside it named "github-password" should be used in Jcasc as ${secret-credentials-github-password}
  # 'name' and 'keyName' must be lowercase RFC 1123 label must consist of lower case alphanumeric characters or '-',
  # and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc')
  additionalExistingSecrets:
    # you should setup the secret `google-oauth2` with key:
    #  `client-id` and `client-secret` before deploy jenkins
    #  in the same namespace.
    - name: google-oauth2
      keyName: client-id
    - name: google-oauth2
      keyName: client-secret

  additionalSecrets: []
  #  - name: nameOfSecret
  #    value: secretText

  JCasC:
    configScripts:
      jobs-dsl: |
        jobs:
          - script: |
              job("seed") {
                description(
                  """
                  Jenkins jobs As Code
                  No need to configure job on Jenkins Web UI anymore.
                  """
                )
                scm {
                  git {
                    remote {
                      github("PingCAP-QE/ci", "https")
                    }
                    branch("main")
                  }
                }
                steps {
                  jobDsl {
                    targets('jobs/**/*.groovy')
                    failOnMissingPlugin(false)
                    ignoreMissingFiles(true)
                    ignoreExisting(false)
                    removedJobAction("DELETE")
                    removedConfigFilesAction("DELETE")
                    removedViewAction("DELETE")
                    lookupStrategy("SEED_JOB")
                    sandbox(false)
                  }
                }
              }
