# imagePullSecrets -- image pull secret for private images
imagePullSecrets: []
# nameOverride -- override name of the chart
nameOverride: ""
# fullnameOverride -- full name of the chart.
fullnameOverride: ""

serviceAccount:
  # serviceAccount.create -- specifies whether a service account should be created
  create: false
  # serviceAccount.annotations -- annotations to add to the service account
  annotations: {}
  # serviceAccount.name -- the name of the service account to use; if not set and create is true, a name is generated using the fullname template
  name:

# containerMetricsPort -- metrics port exposed by container
containerMetricsPort: 8080

browser:
  # browser.enabled -- enable browser component
  enabled: true
  # browser.replicaCount -- number of replicas for the deployment.
  replicaCount: 1
  image:
    # browser.image.repository -- image repository
    repository: buildbarn/bb-browser
    # browser.image.tag -- image tag
    tag: 20230208T101541Z-73a5362
    # browser.image.pullPolicy -- image pull policy
    pullPolicy: IfNotPresent

  # browser.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: {}
  # fsGroup: 2000

  # browser.securityContext -- specifies security settings for a container
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # browser.containerPort -- port exposed by container
  containerPort: 7984

  service:
    # browser.service.type -- service type
    type: ClusterIP
    # browser.service.name -- service name
    name: http
    # browser.service.port -- service port
    port: 7984

  # browser.resources -- custom resource configuration
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # browser.nodeSelector -- node for scheduler pod assignment
  nodeSelector: {}

  # browser.tolerations -- tolerations for scheduler pod assignment
  tolerations: []

  # browser.affinity -- affinity for scheduler pod assignment
  affinity: {}

  # browser.volumeMounts -- volume mounts
  volumeMounts: []
  # - name: cache
  #   mountPath: /data/cache

  # browser.volumes -- volumes
  volumes: []
  # - name: cache
  #   emptyDir: {}

  livenessProbe:
    httpGet:
      # browser.livenessProbe.httpGet.path -- path for liveness probe
      path: /-/healthy
      # browser.livenessProbe.httpGet.port -- port for liveness probe
      port: http-metrics

  readinessProbe:
    httpGet:
      # browser.readinessProbe.httpGet.path -- path for readiness probe
      path: /-/healthy
      # browser.readinessProbe.httpGet.port -- port for readiness probe
      port: http-metrics

  # browser.env -- environment variables for the deployment
  env: []
  # - name: SAMPLE
  #   value: text

  ingress:
    # browser.ingress.enabled -- enables Ingress
    enabled: false
    # browser.ingress.className -- ingress class name
    className: ""
    # browser.ingress.annotations -- ingress annotations
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"

    # browser.ingress.hosts -- ingress accepted hostnames
    hosts: []
    #  - host: chart-example.local
    #    paths:
    #     - path: /
    #       pathType: ImplementationSpecific
    # browser.ingress.tls -- ingress TLS configuration
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  podMonitor:
    # browser.podMonitor.enabled -- PodMonitor CRD is created for a prometheus operator
    enabled: false
    # browser.podMonitor.additionalLabels -- additional labels for pod monitor
    additionalLabels: {}

  # browser.conf -- config https://github.com/buildbarn/bb-browser/blob/547095cf8540c671b0f2291b1e6f76081e47a9fc/pkg/proto/configuration/bb_browser/bb_browser.proto
  conf: |-
    local common = import 'common.libsonnet';
    {
      global: common.global,
      blobstore: common.blobstore,
      maximumMessageSizeBytes: common.maximumMessageSizeBytes,
      listenAddress: ':7984',
      authorizer: common.allowAllauthorizerConfiguration,
    }

frontend:
  # frontend.enabled -- enable frontend component
  enabled: true
  # frontend.replicaCount -- number of replicas for the deployment.
  replicaCount: 1
  image:
    # frontend.image.pullPolicy -- image pull policy
    pullPolicy: IfNotPresent

  # frontend.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: {}
  # fsGroup: 2000

  # frontend.securityContext -- specifies security settings for a container
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # frontend.containerGrpcPort -- grpc port exposed by container
  containerGrpcPort: 8980

  service:
    # frontend.service.type -- service type
    type: ClusterIP
    grpc:
      # frontend.service.grpc.name -- grpc service name
      name: grpc
      # frontend.service.grpc.port -- grpc service port
      port: 8980

  ingress:
    # frontend.ingress.enabled -- enables Ingress
    enabled: false
    # frontend.ingress.className -- ingress class name
    className: ""
    # frontend.ingress.annotations -- ingress annotations
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    # frontend.ingress.hosts -- ingress accepted hostnames
    hosts: []
    #  - host: chart-example.local
    #    paths:
    #     - path: /
    #       pathType: ImplementationSpecific
    # frontend.ingress.tls -- ingress TLS configuration
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  # frontend.resources -- custom resource configuration
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # frontend.nodeSelector -- node for scheduler pod assignment
  nodeSelector: {}

  # frontend.tolerations -- tolerations for scheduler pod assignment
  tolerations: []

  # frontend.affinity -- affinity for scheduler pod assignment
  affinity: {}

  # frontend.volumeMounts -- volume mounts
  volumeMounts: []
  # - name: cache
  #   mountPath: /data/cache

  # frontend.volumes -- volumes
  volumes: []
  # - name: cache
  #   emptyDir: {}

  livenessProbe:
    httpGet:
      # frontend.livenessProbe.httpGet.path -- path for liveness probe
      path: /-/healthy
      # frontend.livenessProbe.httpGet.port -- port for liveness probe
      port: http-metrics

  readinessProbe:
    httpGet:
      # frontend.readinessProbe.httpGet.path -- path for readiness probe
      path: /-/healthy
      # frontend.readinessProbe.httpGet.port -- port for readiness probe
      port: http-metrics

  # frontend.env -- environment variables for the deployment
  env: []
  # - name: SAMPLE
  #   value: text

  podMonitor:
    # frontend.podMonitor.enabled -- PodMonitor CRD is created for a prometheus operator
    enabled: false
    # frontend.podMonitor.additionalLabels -- additional labels for pod monitor
    additionalLabels: {}

  # frontend.conf -- config https://github.com/buildbarn/bb-storage/blob/e5ee29d82ea7f458ad720a6ade4480e5838ab495/pkg/proto/configuration/bb_storage/bb_storage.proto
  conf: |-
    local common = import 'common.libsonnet';
    {
      global: common.global,
      grpcServers: [{
        listenAddresses: [':8980'],
        authenticationPolicy: { allow: {} },
      }],
      schedulers: {
        '': {
          endpoint: {
            address: 'buildbarn-scheduler:8982',
            addMetadataJmespathExpression: '{
              "build.bazel.remote.execution.v2.requestmetadata-bin": incomingGRPCMetadata."build.bazel.remote.execution.v2.requestmetadata-bin"
            }',
          }
        },
      },
      maximumMessageSizeBytes: common.maximumMessageSizeBytes,
      contentAddressableStorage: {
        backend: common.blobstore.contentAddressableStorage,
        getAuthorizer: { allow: {} },
        putAuthorizer: { allow: {} },
        findMissingAuthorizer: { allow: {} },
      },
      actionCache: {
        backend: common.blobstore.actionCache,
        getAuthorizer: { allow: {} },
        putAuthorizer: { allow: {} },
      },
      executeAuthorizer: { allow: {} },
    }

scheduler:
  # scheduler.enabled -- enable scheduler component
  enabled: true
  # scheduler.replicaCount -- number of replicas for the deployment.
  replicaCount: 1
  image:
    # scheduler.image.repository -- image repository
    repository: buildbarn/bb-scheduler
    # scheduler.image.tag -- image tag
    tag: 20230213T172655Z-e0ae60c
    # scheduler.image.pullPolicy -- image pull policy
    pullPolicy: IfNotPresent

  # scheduler.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: {}
  # fsGroup: 2000

  # scheduler.securityContext -- specifies security settings for a container
  securityContext: {}
    # capabilities:
    #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # scheduler.containerHttpPort -- http port exposed by container
  containerHttpPort: 7982
  # scheduler.containerGrpcClientPort -- client grpc port exposed by container
  containerGrpcClientPort: 8982
  # scheduler.containerGrpcWorkerPort -- worker grpc port exposed by container
  containerGrpcWorkerPort: 8983

  service:
    # scheduler.service.type -- service type
    type: ClusterIP
    http:
      # scheduler.service.http.name -- http service name
      name: http
      # scheduler.service.http.port -- http service port
      port: 7982
    grpcClient:
      # scheduler.service.grpcClient.name -- grpc client service name
      name: grpc-client
      # scheduler.service.grpcClient.port -- grpc client service port
      port: 8982
    grpcWorker:
      # scheduler.service.grpcWorker.name -- grpc worker service name
      name: grpc-worker
      # scheduler.service.grpcWorker.port -- grpc worker service port
      port: 8983

  # scheduler.resources -- custom resource configuration
  resources: {}
    # limits:
    #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # scheduler.nodeSelector -- node for scheduler pod assignment
  nodeSelector: {}

  # scheduler.tolerations -- tolerations for scheduler pod assignment
  tolerations: []

  # scheduler.affinity -- affinity for scheduler pod assignment
  affinity: {}

  # scheduler.volumeMounts -- volume mounts
  volumeMounts: []
  # - name: cache
  #   mountPath: /data/cache

  # scheduler.volumes -- volumes
  volumes: []
  # - name: cache
  #   emptyDir: {}

  livenessProbe:
    httpGet:
      # scheduler.livenessProbe.httpGet.path -- path for liveness probe
      path: /-/healthy
      # scheduler.livenessProbe.httpGet.port -- port for liveness probe
      port: http-metrics

  readinessProbe:
    httpGet:
      # scheduler.readinessProbe.httpGet.path -- path for readiness probe
      path: /-/healthy
      # scheduler.readinessProbe.httpGet.port -- port for readiness probe
      port: http-metrics

  # scheduler.env -- environment variables for the deployment
  env: []
  # - name: SAMPLE
  #   value: text

  podMonitor:
    # scheduler.podMonitor.enabled -- PodMonitor CRD is created for a prometheus operator
    enabled: false
    # scheduler.podMonitor.additionalLabels -- additional labels for pod monitor
    additionalLabels: {}

  # scheduler.conf -- config https://github.com/buildbarn/bb-remote-execution/blob/74b54e3e72c8ae507bbee1efe18aad1fbbe8de9e/pkg/proto/configuration/bb_scheduler/bb_scheduler.proto
  conf: |-
    local common = import 'common.libsonnet';

    {
      adminHttpListenAddress: ':7982',
      clientGrpcServers: [{
        listenAddresses: [':8982'],
        authenticationPolicy: { allow: {} },
      }],
      workerGrpcServers: [{
        listenAddresses: [':8983'],
        authenticationPolicy: { allow: {} },
      }],
      browserUrl: common.browserUrl,
      contentAddressableStorage: common.blobstore.contentAddressableStorage,
      maximumMessageSizeBytes: common.maximumMessageSizeBytes,
      global: common.global,
      executeAuthorizer: { allow: {} },
      actionRouter: {
        simple: {
          platformKeyExtractor: { actionAndCommand: {} },
          invocationKeyExtractors: [
            { correlatedInvocationsId: {} },
            { toolInvocationId: {} },
          ],
          initialSizeClassAnalyzer: {
            defaultExecutionTimeout: '1800s',
            maximumExecutionTimeout: '7200s',
          },
        },
      },
      platformQueueWithNoWorkersTimeout: '900s',
    }

worker:
  # worker.enabled -- enable worker component
  enabled: true
  # worker.replicaCount -- number of replicas for the deployment.
  replicaCount: 1

  runnerInstallerContainer:
    image:
      # worker.runnerInstallerContainer.image.pullPolicy -- image pull policy
      pullPolicy: IfNotPresent
      # worker.runnerInstallerContainer.image.repository -- image repository
      repository: buildbarn/bb-runner-installer
      # worker.runnerInstallerContainer.image.tag -- image tag
      tag: 20230213T172655Z-e0ae60c

  volumeInitContainer:
    image:
      # worker.volumeInitContainer.image.pullPolicy -- image pull policy
      pullPolicy: IfNotPresent
      # worker.volumeInitContainer.image.repository -- image repository
      repository: busybox
      # worker.volumeInitContainer.image.tag -- image tag
      tag: 1.36.1-uclibc

  workerContainer:
    image:
      # worker.workerContainer.image.pullPolicy -- image pull policy
      pullPolicy: IfNotPresent
      # worker.workerContainer.image.repository -- image repository
      repository: buildbarn/bb-worker
      # worker.workerContainer.image.tag -- image tag
      tag: 20230213T172655Z-e0ae60c
    # worker.workerContainer.securityContext -- specifies security settings for a container
    securityContext: {}
      # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

    livenessProbe:
      httpGet:
        # worker.workerContainer.livenessProbe.httpGet.path -- path for liveness probe
        path: /-/healthy
        # worker.workerContainer.livenessProbe.httpGet.port -- port for liveness probe
        port: http-metrics

    readinessProbe:
      httpGet:
        # worker.workerContainer.readinessProbe.httpGet.path -- path for readiness probe
        path: /-/healthy
        # worker.workerContainer.readinessProbe.httpGet.port -- port for readiness probe
        port: http-metrics

    # worker.workerContainer.resources -- custom resource configuration
    resources: {}
      # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  runnerContainer:
    image:
      # worker.runnerContainer.image.pullPolicy -- image pull policy
      pullPolicy: IfNotPresent
      # worker.runnerContainer.image.repository -- image repository (default is https://console.cloud.google.com/marketplace/product/google/rbe-ubuntu18-04)
      repository: ghcr.io/catthehacker/ubuntu
      # worker.runnerContainer.image.tag -- image tag
      tag: act-22.04@sha256:6a60bcb2496c221a67a6cce88242c6bd06d4e616b6fe7887168458fc3a3553ef
    # worker.runnerContainer.securityContext -- specifies security settings for a container
    securityContext:
      runAsUser: 65534
      allowPrivilegeEscalation: false

    # worker.runnerContainer.resources -- custom resource configuration
    resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  # worker.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: {}
  # fsGroup: 2000

  # worker.nodeSelector -- node for scheduler pod assignment
  nodeSelector: {}

  # worker.tolerations -- tolerations for scheduler pod assignment
  tolerations: []

  # worker.affinity -- affinity for scheduler pod assignment
  affinity: {}

  # worker.volumeMounts -- volume mounts
  volumeMounts: []
  # - name: cache
  #   mountPath: /data/cache

  # worker.volumes -- volumes
  volumes: []
  # - name: cache
  #   emptyDir: {}

  # worker.env -- environment variables for the deployment
  env: []
  # - name: SAMPLE
  #   value: text

  podMonitor:
    # worker.podMonitor.enabled -- PodMonitor CRD is created for a prometheus operator
    enabled: false
    # worker.podMonitor.additionalLabels -- additional labels for pod monitor
    additionalLabels: {}

  # worker.workerConf -- config https://github.com/buildbarn/bb-remote-execution/blob/74b54e3e72c8ae507bbee1efe18aad1fbbe8de9e/pkg/proto/configuration/bb_worker/bb_worker.proto
  workerConf: |-
    local common = import 'common.libsonnet';
    {
      global: common.global,
      blobstore: common.blobstore,
      maximumMessageSizeBytes: common.maximumMessageSizeBytes,
      scheduler: { address: 'buildbarn-scheduler:8983' },
      browserUrl: common.browserUrl,
      buildDirectories: [{
        native: {
          buildDirectoryPath: '/worker/build',
          cacheDirectoryPath: '/worker/cache',
          maximumCacheFileCount: 10000,
          maximumCacheSizeBytes: 1024 * 1024 * 1024,
          cacheReplacementPolicy: 'RANDOM_REPLACEMENT',
        },
        runners: [{
          endpoint: { address: 'unix:///worker/runner' },
          instanceNamePrefix: 'remote-execution',
          concurrency: 8,
          platform: {
            properties: [],
          },
          workerId: {
            'pod': std.extVar("POD_NAME"),
            'node': std.extVar("NODE_NAME")
          },
        }],
      }],
      outputUploadConcurrency: 11,
      directoryCache: {
        maximumCount: 1000,
        maximumSizeBytes: 1000 * 1024,
        cacheReplacementPolicy: 'LEAST_RECENTLY_USED',
      },
    }
  # worker.runnerConf -- config https://github.com/buildbarn/bb-remote-execution/blob/74b54e3e72c8ae507bbee1efe18aad1fbbe8de9e/pkg/proto/configuration/bb_runner/bb_runner.proto
  runnerConf: |-
    local common = import 'common.libsonnet';
    {
      # global: common.global,
      buildDirectoryPath: '/worker/build',
      set_tmpdir_environment_variable: true,
      grpcServers: [{
        listenPaths: ['/worker/runner'],
        authenticationPolicy: { allow: {} },
      }],
    }

storage:
  # storage.enabled -- enable storage component
  enabled: true
  # storage.replicaCount -- number of replicas for the deployment.
  replicaCount: 2
  image:
    # storage.image.repository -- image repository
    repository: buildbarn/bb-storage
    # storage.image.tag -- image tag
    tag: 20230208T220714Z-fd356c8
    # storage.image.pullPolicy -- image pull policy
    pullPolicy: IfNotPresent

  # storage.podSecurityContext -- specifies security settings for a pod
  podSecurityContext: {}
  # fsGroup: 2000

  # storage.securityContext -- specifies security settings for a container
  securityContext: {}
    # capabilities:
    #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

  # storage.containerGrpcPort -- grpc port exposed by container
  containerGrpcPort: 8981

  service:
    # storage.service.type -- service type
    type: ClusterIP
    grpc:
      # storage.service.grpc.name -- grpc service name
      name: grpc
      # storage.service.grpc.port -- grpc service port
      port: 8981

  # storage.resources -- custom resource configuration
  resources: {}
    # limits:
    #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

  # storage.nodeSelector -- node for scheduler pod assignment
  nodeSelector: {}

  # storage.tolerations -- tolerations for scheduler pod assignment
  tolerations: []

  # storage.affinity -- affinity for scheduler pod assignment
  affinity: {}

  # storage.volumeMounts -- volume mounts
  volumeMounts: []
  # - name: cache
  #   mountPath: /data/cache

  # storage.volumes -- volumes
  volumes: []
  # - name: cache
  #   emptyDir: {}

  volumeClaims:
    # storage.volumeClaims.cas -- cas volume claim spec
    cas:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 12Gi
    # storage.volumeClaims.ac -- ac volume claim spec
    ac:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    # storage.volumeClaims.additional -- additional volume claims
    additional: []

  livenessProbe:
    httpGet:
      # storage.livenessProbe.httpGet.path -- path for liveness probe
      path: /-/healthy
      # storage.livenessProbe.httpGet.port -- port for liveness probe
      port: http-metrics

  readinessProbe:
    httpGet:
      # storage.readinessProbe.httpGet.path -- path for readiness probe
      path: /-/healthy
      # storage.readinessProbe.httpGet.port -- port for readiness probe
      port: http-metrics

  # storage.env -- environment variables for the deployment
  env: []
  # - name: SAMPLE
  #   value: text

  podMonitor:
    # storage.podMonitor.enabled -- PodMonitor CRD is created for a prometheus operator
    enabled: false
    # storage.podMonitor.additionalLabels -- additional labels for pod monitor
    additionalLabels: {}

  # storage.conf -- config https://github.com/buildbarn/bb-storage/blob/e5ee29d82ea7f458ad720a6ade4480e5838ab495/pkg/proto/configuration/bb_storage/bb_storage.proto
  conf: |-
    local common = import 'common.libsonnet';

    {
      global: common.global,
      grpcServers: [{
        listenAddresses: [':8981'],
        authenticationPolicy: common.allowAllauthorizerConfiguration,
      }],
      maximumMessageSizeBytes: common.maximumMessageSizeBytes,
      contentAddressableStorage: {
        backend: {
          'local': {
            keyLocationMapOnBlockDevice: {
              file: {
                path: '/storage-cas/key_location_map',
                sizeBytes: 16 * 1024 * 1024,
              },
            },
            keyLocationMapMaximumGetAttempts: 8,
            keyLocationMapMaximumPutAttempts: 32,
            oldBlocks: 8,
            currentBlocks: 24,
            newBlocks: 1,
            blocksOnBlockDevice: {
              source: {
                file: {
                  path: '/storage-cas/blocks',
                  sizeBytes: 32 * 1024 * 1024 * 1024,
                },
              },
              spareBlocks: 3,
            },
            persistent: {
              stateDirectoryPath: '/storage-cas/persistent_state',
              minimumEpochInterval: '300s',
            },
          },
        },
        getAuthorizer: { allow: {} },
        putAuthorizer: { allow: {} },
        findMissingAuthorizer: { allow: {} },
      },
      actionCache: {
        backend: {
          'local': {
            keyLocationMapOnBlockDevice: {
              file: {
                path: '/storage-ac/key_location_map',
                sizeBytes: 1024 * 1024,
              },
            },
            keyLocationMapMaximumGetAttempts: 8,
            keyLocationMapMaximumPutAttempts: 32,
            oldBlocks: 8,
            currentBlocks: 24,
            newBlocks: 1,
            blocksOnBlockDevice: {
              source: {
                file: {
                  path: '/storage-ac/blocks',
                  sizeBytes: 20 * 1024 * 1024,
                },
              },
              spareBlocks: 3,
            },
            persistent: {
              stateDirectoryPath: '/storage-ac/persistent_state',
              minimumEpochInterval: '300s',
            },
          },
        },
        getAuthorizer: { allow: {} },
        putAuthorizer: { allow: {} },
      },
    }

commonConf: |-
  {
    global: {
      diagnosticsHttpServer: {
        listenAddress: ':8080',
        enablePrometheus: true,
        enablePprof: true,
        enableActiveSpans: true,
      },
      setUmask: { umask: 0 },
    },
    allowAllauthorizerConfiguration: {
      allow: {},
    },
    blobstore: {
      contentAddressableStorage: {
        sharding: {
          hashInitialization: 11946695773637837490,
          shards: [
            {
              backend: { grpc: { address: 'buildbarn-storage-0.buildbarn-storage:8981' } },
              weight: 1,
            },
            {
              backend: { grpc: { address: 'buildbarn-storage-1.buildbarn-storage:8981' } },
              weight: 1,
            },
          ],
        },
      },
      actionCache: {
        completenessChecking: {
          backend: {
            sharding: {
              hashInitialization: 14897363947481274433,
              shards: [
                {
                  backend: { grpc: { address: 'buildbarn-storage-0.buildbarn-storage:8981' } },
                  weight: 1,
                },
                {
                  backend: { grpc: { address: 'buildbarn-storage-1.buildbarn-storage:8981' } },
                  weight: 1,
                },
              ],
            },
          },
          maximumTotalTreeSizeBytes: 64 * 1024 * 1024,
        },
      },
    },
    # Remember to set your browserUrl to the ingress of the browser deployment
    browserUrl: 'http://buildbarn-browser:80',
    maximumMessageSizeBytes: 16 * 1024 * 1024,
    httpListenAddress: ':80'
  }
